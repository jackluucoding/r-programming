library(tidyverse)
df <- readRDS("tidytuesday_tweets.rds")
#head(df)
#tail(df)
#str(df)
df1 <- df %>% group_by(screen_name) %>% tally()
#df1
df25 <- df1[ which(df1$n>24),]
#df25
p<-ggplot(data=df25, aes(x=screen_name, y=n)) +
geom_bar(stat="identity", fill="purple") + theme_classic() + xlab("Screen Name") + ylab("Number of Tweets") +
ggtitle("Screen Name and Tweets Histogram")
p
library(rtweet)
ts_plot(df, "1 weeks") + theme_classic() + theme(plot.title = element_text(face = "bold")) + labs(
x = "Months in year", y = " Frequency",
title = "Tweets data as a time series",
subtitle = "This graph is created using interval of time expressed as 1 week",
caption = "\nSource: Data collected from #TidyTuesday"
)
df_4names <- subset(df, screen_name == "harrocyranka"|screen_name == "WireMonkey"|screen_name == "R4DScommunity"| screen_name == "thomas_mock")
#head(df_4names)
#tail(df_4names)
#str(df_4names)
thomas <- subset(df_4names, screen_name =="thomas_mock")
r4ds <- subset(df_4names, screen_name =="R4DScommunity")
harro <- subset(df_4names, screen_name =="harrocyranka")
wiremonkey <- subset(df_4names, screen_name == "WireMonkey")
ts_plot(df_4names, "1 weeks") + theme_classic() + theme(plot.title = element_text(face = "bold")) + labs(
x = "Months in year", y = " Frequency",
title = "Tweets data of Thomas, Harro, WireMonkey, & R4DScommunity as time series",
subtitle = "This graph is created using interval of time expressed as 1 week",
caption = "\nSource: Data collected from #TidyTuesday"
)
ts_plot(thomas,"1 weeks") + theme_classic() + theme(plot.title = element_text(face = "bold")) + labs(
x = "Months in year", y = " Frequency",
title = "Tweets data of Thomas",
subtitle = "This graph is created using interval of time expressed as 1 week",
caption = "\nSource: Data collected from #TidyTuesday"
)
ts_plot(r4ds,"1 weeks") + theme_classic() + theme(plot.title = element_text(face = "bold")) + labs(
x = "Months in year", y = " Frequency",
title = "Tweets data of R4DS",
subtitle = "This graph is created using interval of time expressed as 1 week",
caption = "\nSource: Data collected from #TidyTuesday"
)
ts_plot(harro,"1 weeks") + theme_classic() + theme(plot.title = element_text(face = "bold")) + labs(
x = "Months in year", y = " Frequency",
title = "Tweets data of Harro Cyranka",
subtitle = "This graph is created using interval of time expressed as 1 week",
caption = "\nSource: Data collected from #TidyTuesday"
)
ts_plot(wiremonkey,"1 weeks") + theme_classic() + theme(plot.title = element_text(face = "bold")) + labs(
x = "Months in year", y = " Frequency",
title = "Tweets data of Wire Monkey",
subtitle = "This graph is created using interval of time expressed as 1 week",
caption = "\nSource: Data collected from #TidyTuesday"
)
library(tokenizers) #Could not use the tokenize argument, thus I have to install the "Tokenizers" package to do the job.
#Convert to plain text
thomas_plain <- tokenize_words(plain_tweets(thomas$text))
r4ds_plain <- tokenize_words(plain_tweets(r4ds$text))
harro_plain<- tokenize_words(plain_tweets(harro$text))
wiremonkey_plain <- tokenize_words(plain_tweets(wiremonkey$text))
count_thomas <- table(unlist(thomas_plain))
count_r4ds <- table(unlist(r4ds_plain))
count_harro <- table(unlist(harro_plain))
count_wiremonkey <- table(unlist(wiremonkey_plain))
thomas_25 = head(sort(count_thomas, decreasing = TRUE), 25)
#thomas_25
r4ds_25 = head(sort(count_r4ds, decreasing = TRUE), 25)
#r4ds_25
harro_25 = head(sort(count_harro, decreasing = TRUE), 25)
#harro_25
wiremonkey_25 = head(sort(count_wiremonkey, decreasing = TRUE), 25)
#wiremonkey_25
library(syuzhet)
thomas_words <- get_tokens(thomas$text, pattern = "\\W")
r4ds_words <- get_tokens(r4ds$text, pattern = "\\W")
harro_words <- get_tokens(harro$text, pattern = "\\W")
wiremonkey_words <- get_tokens(wiremonkey$text, pattern = "\\W")
thomas_syuzhet_vector <- get_sentiment(thomas_words, method="syuzhet")
r4ds_syuzhet_vector <- get_sentiment(r4ds_words, method="syuzhet")
harro_syuzhet_vector <- get_sentiment(harro_words, method="syuzhet")
wiremonkey_syuzhet_vector <- get_sentiment(wiremonkey_words, method="syuzhet")
sum(thomas_syuzhet_vector)
sum(r4ds_syuzhet_vector)
sum(harro_syuzhet_vector)
sum(wiremonkey_syuzhet_vector)
summary(thomas_syuzhet_vector)
percent_vals_thomas <- get_percentage_values(thomas_syuzhet_vector, bins = 300)
plot(
percent_vals_thomas,
type="l",
main="Thomas's Sentiment Analysis",
xlab = "Narrative Time",
ylab= "Emotional Valence"
)
summary(r4ds_syuzhet_vector)
percent_vals_r4ds <- get_percentage_values(r4ds_syuzhet_vector, bins = 300)
plot(
percent_vals_r4ds,
type="l",
main="R4DS's Sentiment Analysis",
xlab = "Narrative Time",
ylab= "Emotional Valence"
)
summary(harro_syuzhet_vector)
percent_vals_harro <- get_percentage_values(harro_syuzhet_vector, bins = 300)
plot(
percent_vals_harro,
type="l",
main="Harro Cyranka's Sentiment Analysis",
xlab = "Narrative Time",
ylab= "Emotional Valence"
)
summary(wiremonkey_syuzhet_vector)
percent_vals_wiremonkey <- get_percentage_values(wiremonkey_syuzhet_vector, bins = 300)
plot(
percent_vals_wiremonkey,
type="l",
main="Wire Monkey's Sentiment Analysis",
xlab = "Narrative Time",
ylab= "Emotional Valence"
)
wickham = subset(df, grepl("hadleywickham", mentions_screen_name))
#wickham
#21 of them do mention wickham
no_wickham = subset(df, !grepl("hadleywickham", mentions_screen_name))
#head(no_wickham)
#tail(no_wickham)
#str(no_wickham)
#no_wickham # 1544 tweets that don't mention Wickham
wickham_words <- get_tokens(wickham$text, pattern = "\\W") #tokenize into single words
#str(wickham_words)
wickham_syuzhet_vector <- get_sentiment(wickham_words, method="syuzhet")
str(wickham_syuzhet_vector)
summary(wickham_syuzhet_vector)
no_wickham_words <- get_tokens(no_wickham$text, pattern = "\\W") #tokenize into single words
#no_wickham_words
no_wickham_syuzhet_vector <- get_sentiment(no_wickham_words, method="syuzhet")
str(no_wickham_syuzhet_vector)
summary(no_wickham_syuzhet_vector)
combined = cbind(no_wickham_syuzhet_vector,wickham_syuzhet_vector)
combined = as.data.frame(combined)
#head(combined)
#tail(combined)
#str(combined)
df_combined <- gather(combined, key="measure", value="value", c("no_wickham_syuzhet_vector", "wickham_syuzhet_vector"))
#head(df_combined)
#tail(df_combined)
#str(df_combined)
df_combined%>% group_by(measure) %>%  summarize(Program_sd = sd(value))
df_combined%>% group_by(measure) %>%  summarize(Mean = mean(value))
ind.t.test<-t.test(value ~ measure, data = df_combined)
ind.t.test
#str(ind.t.test)
#str(summary(ind.t.test))
pval <- ind.t.test$p.value
tval <- ind.t.test$statistic
